class Solution {
public:
    bool LongestCommonSubsequence(string s1, int m, string s2, int n){
        if(m==0 || n==0)
            return 0;
        vector<vector<int>> t(m+1, vector<int>(n+1));
        for(int i = 0; i<m+1; i++){
            for(int j = 0; j<n+1; j++){
                if(i==0 || j==0)
                    t[i][j] = 0;
            }
        }
        
        for(int i = 1; i<m+1; i++){
            for(int j = 1; j<n+1; j++){
                if(s1[i-1] == s2[j-1])
                    t[i][j] = 1+t[i-1][j-1];
                else
                    t[i][j] = max(t[i][j-1], t[i-1][j]);
            }
        }
        
        if(t[m][n] < m)
            return false;
        
        int i = m, j = n;
        string sequenceString = "";
        while(i>0 && j>0){
            if(s1[i-1] == s2[j-1]){
                sequenceString += s1[i-1];
                i--;
                j--;
            } else {
                if(t[i-1][j] > t[i][j-1])
                    i--;
                else
                    j--;
            }
        }
        reverse(sequenceString.begin(), sequenceString.end());
        if(s1 == sequenceString)
            return true;
        return false;
    }
    
    bool isSubsequence(string s, string t) {
        if(s.length() == 0)
            return true;
        if(t.length() == 0 || s.length() > t.length())
            return false;
        int m = s.length();
        int n = t.length();
        
        return LongestCommonSubsequence(s, m, t, n);
    }
};
