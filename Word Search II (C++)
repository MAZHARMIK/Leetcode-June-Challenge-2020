class Trie{
public:
    Trie* children[26];
    bool one_word_found;
    Trie():one_word_found(false){
        for(int i = 0; i<26; i++){
            children[i]  = NULL;
        }
    }
    ~Trie(){
        for(int i = 0; i<26; i++){
            if(children[i])
                delete children[i];
        }
    }
    void insert_in_trie(string word){
        Trie* curr = this;
        for(char c:word){
            if(!curr->children[c-'a'])
                curr->children[c-'a'] = new Trie();
            curr = curr->children[c-'a'];
        }
        curr->one_word_found = true;
    }
};
class Solution {
public:
    void search(vector<vector<char>>& board, int i, int j, set<string> &result, Trie* trie, string str) {
        char temp = board[i][j];
        if(temp == ' ')
            return;
        board[i][j] = ' ';
        Trie* t = trie->children[temp-'a'];
        if(t){
            string temp_string = str + temp;
            if(t->one_word_found)
                result.insert(temp_string);
            if(i < board.size()-1)
                search(board, i+1, j, result, t, temp_string);
            if(j < board[0].size()-1)
                search(board, i, j+1, result, t, temp_string);
            if(i > 0)
                search(board, i-1, j, result, t, temp_string);
            if(j > 0)
                search(board, i, j-1, result, t, temp_string);
        }
        board[i][j] = temp;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie trie;
        for(string w:words){
            trie.insert_in_trie(w);
        }

        set<string> result;
        for(int i = 0; i<board.size(); i++){
            for(int j = 0; j<board[0].size(); j++){
                search(board, i, j, result, &trie, "");
            }
        }
        vector<string> vec;
        for(auto str:result)
            vec.push_back(str);
        return vec;
    }
};
