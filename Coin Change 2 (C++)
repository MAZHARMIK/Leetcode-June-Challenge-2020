class Solution {
public:
    int unboundedKnapsack(vector<int> coins, int s, int n){
        vector<vector<int>> t(n+1, vector<int>(s+1));
        
        for(int i = 0; i<n+1; i++){
            for(int j = 0; j<s+1; j++){
                if(i == 0){ //no coins and we need sum = something, then 0 ways hai karne ka waisa
                    t[i][j] = 0;
                }
                if(j == 0) //sum = 0 chaie, and we have coins, then ek way hai na 0 laane ka, i.e. 0 no. of coins
                    t[i][j] = 1;
            }
        }
        
        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<s+1; j++){
                if(coins[i-1] <= j)
                    t[i][j] = t[i][j-coins[i-1]] + t[i-1][j];
                else
                    t[i][j] = t[i-1][j];
            }
        }
        return t[n][s];        
    }
    
    int change(int amount, vector<int>& coins) {
        return unboundedKnapsack(coins, amount, coins.size());
    }
};
